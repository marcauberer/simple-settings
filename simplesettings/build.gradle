/*
 * Copyright Â© Marc Auberer 2020-2021. All rights reserved
 */

plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'com.jfrog.artifactory'
    id 'maven-publish'
    id 'android-maven'
    id 'org.jetbrains.dokka'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 30
        versionCode library_version_code
        versionName library_version
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    // Base dependencies
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.core:core-ktx:1.5.0-beta03'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.4'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.4'
    implementation 'androidx.activity:activity-ktx:1.3.0-alpha04'

    // Google dependencies
    api 'com.google.android.material:material:1.3.0'
    api 'androidx.preference:preference-ktx:1.1.1'

    // External dependencies
    api 'com.mikepenz:aboutlibraries-core:8.8.0'
    api 'com.mikepenz:aboutlibraries:8.8.0@aar'
    api 'com.mikepenz:fastadapter:5.3.5'
    api 'com.github.ibrahimsn98:live-preferences:1.9'
    api 'com.github.skydoves:colorpickerpreference:2.0.5'

    // Test dependencies
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}

dokkaHtml.configure {
    dokkaSourceSets {}
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier = "sources"
}

publishing {
    publications {
        android.libraryVariants.all { variant ->
            def filename = "${archivesBaseName}-${variant.baseName}"
            "${variant.name}"(MavenPublication) {
                groupId 'com.chillibits'
                artifactId = "simplesettings"
                if (project.hasProperty('paramEnv') && project.property('paramEnv') != 'RELEASE' || variant.name != "release") {
                    groupId "com.chillibits.${variant.name}"
                }
                version = "${android.defaultConfig.versionName}"
                if (variant.buildType.name == "debug") {
                    artifact(sourcesJar)
                }
                artifact file("$buildDir/outputs/aar/${filename}.aar")
                pom.withXml {
                    // for dependencies and exclusions
                    def dependenciesNode = asNode().appendNode('dependencies')
                    def configurationNames = ["implementation", "api", "runtimeOnly"]
                    configurationNames.each { confName ->
                        configurations[confName].allDependencies.each {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                            if (it.excludeRules.size() > 0) {
                                def exclusionsNode = dependencyNode.appendNode('exclusions')
                                it.excludeRules.each { rule ->
                                    def exclusionNode = exclusionsNode.appendNode('exclusion')
                                    exclusionNode.appendNode('groupId', rule.group)
                                    exclusionNode.appendNode('artifactId', rule.module)
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
assemble.finalizedBy(artifactoryPublish)
artifactory {
    contextUrl = "${artifactory_context_url}"
    publish {
        repository {
            repoKey = "${artifactory_dev_repo_key}"
            if (project.hasProperty('paramEnv') && project.property('paramEnv') == 'RELEASE') {
                repoKey = "${artifactory_rel_repo_key}"
            }
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
        }
        defaults {
            if (project.hasProperty('paramEnv') && project.property('paramEnv') == 'RELEASE') {
                publications('release')
            } else {
                publications('debug', 'release')
            }
            publishArtifacts = true
            publishPom = true
        }
    }
    resolve {
        repository {
            repoKey = "${artifactory_rel_repo_key}"
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
        }
    }
}